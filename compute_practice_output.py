import numpy as np

# Image shape: (16, 16, 3), values in [0, 255]
image = np.array([
  [[83, 88, 105], [136, 115, 74], [136, 120, 73], [26, 89, 136], [42, 113, 190], [42, 117, 190], [24, 113, 134], [81, 106, 190], [80, 110, 189], [21, 137, 132], [27, 178, 185], [27, 182, 184], [247, 252, 251], [131, 141, 156], [130, 145, 156], [73, 167, 142]],
  [[136, 115, 74], [245, 158, 11], [245, 158, 11], [26, 97, 135], [59, 130, 246], [248, 251, 254], [23, 121, 133], [139, 92, 246], [139, 92, 246], [20, 145, 132], [34, 211, 238], [34, 211, 238], [18, 169, 130], [244, 114, 182], [244, 114, 182], [137, 145, 153]],
  [[136, 120, 73], [245, 158, 11], [245, 158, 11], [25, 105, 135], [59, 130, 246], [59, 130, 246], [22, 129, 133], [139, 92, 246], [139, 92, 246], [19, 153, 131], [34, 211, 238], [34, 211, 238], [17, 177, 130], [244, 114, 182], [254, 250, 252], [144, 142, 151]],
  [[26, 89, 136], [26, 97, 135], [25, 105, 135], [24, 113, 134], [23, 121, 133], [22, 129, 133], [21, 137, 132], [247, 251, 251], [19, 153, 131], [19, 161, 131], [18, 169, 130], [17, 177, 130], [16, 185, 129], [30, 177, 125], [44, 170, 121], [57, 163, 117]],
  [[248, 250, 252], [59, 130, 246], [59, 130, 246], [23, 121, 133], [139, 92, 246], [139, 92, 246], [20, 145, 132], [34, 211, 238], [34, 211, 238], [18, 169, 130], [244, 114, 182], [244, 114, 182], [30, 177, 125], [245, 158, 11], [245, 158, 11], [158, 157, 62]],
  [[42, 117, 190], [59, 130, 246], [59, 130, 246], [22, 129, 133], [139, 92, 246], [139, 92, 246], [19, 153, 131], [34, 211, 238], [34, 211, 238], [247, 252, 250], [244, 114, 182], [244, 114, 182], [44, 170, 121], [245, 158, 11], [245, 158, 11], [165, 153, 60]],
  [[24, 113, 134], [23, 121, 133], [247, 251, 251], [21, 137, 132], [20, 145, 132], [19, 153, 131], [19, 161, 131], [18, 169, 130], [17, 177, 130], [16, 185, 129], [30, 177, 125], [44, 170, 121], [57, 163, 117], [71, 156, 113], [86, 148, 110], [99, 141, 106]],
  [[81, 106, 190], [139, 92, 246], [139, 92, 246], [20, 145, 132], [34, 211, 238], [34, 211, 238], [18, 169, 130], [244, 114, 182], [244, 114, 182], [30, 177, 125], [245, 158, 11], [254, 251, 247], [71, 156, 113], [59, 130, 246], [59, 130, 246], [86, 131, 174]],
  [[80, 110, 189], [139, 92, 246], [139, 92, 246], [19, 153, 131], [247, 253, 254], [34, 211, 238], [17, 177, 130], [244, 114, 182], [244, 114, 182], [44, 170, 121], [245, 158, 11], [245, 158, 11], [86, 148, 110], [59, 130, 246], [59, 130, 246], [93, 128, 172]],
  [[21, 137, 132], [20, 145, 132], [19, 153, 131], [19, 161, 131], [18, 169, 130], [17, 177, 130], [16, 185, 129], [30, 177, 125], [44, 170, 121], [57, 163, 117], [71, 156, 113], [86, 148, 110], [99, 141, 106], [250, 251, 250], [127, 126, 98], [141, 119, 94]],
  [[27, 178, 185], [34, 211, 238], [34, 211, 238], [18, 169, 130], [244, 114, 182], [244, 114, 182], [247, 252, 250], [245, 158, 11], [245, 158, 11], [71, 156, 113], [59, 130, 246], [59, 130, 246], [113, 133, 102], [139, 92, 246], [139, 92, 246], [147, 102, 168]],
  [[27, 182, 184], [34, 211, 238], [34, 211, 238], [17, 177, 130], [244, 114, 182], [244, 114, 182], [44, 170, 121], [245, 158, 11], [245, 158, 11], [86, 148, 110], [59, 130, 246], [59, 130, 246], [127, 126, 98], [139, 92, 246], [139, 92, 246], [251, 249, 252]],
  [[19, 161, 131], [18, 169, 130], [17, 177, 130], [16, 185, 129], [30, 177, 125], [44, 170, 121], [57, 163, 117], [71, 156, 113], [249, 251, 250], [99, 141, 106], [113, 133, 102], [127, 126, 98], [141, 119, 94], [155, 112, 91], [169, 104, 87], [183, 97, 83]],
  [[131, 141, 156], [254, 250, 252], [244, 114, 182], [30, 177, 125], [245, 158, 11], [245, 158, 11], [71, 156, 113], [59, 130, 246], [59, 130, 246], [113, 133, 102], [139, 92, 246], [139, 92, 246], [155, 112, 91], [34, 211, 238], [34, 211, 238], [115, 150, 158]],
  [[130, 145, 156], [244, 114, 182], [244, 114, 182], [44, 170, 121], [245, 158, 11], [245, 158, 11], [86, 148, 110], [59, 130, 246], [59, 130, 246], [127, 126, 98], [139, 92, 246], [139, 92, 246], [169, 104, 87], [34, 211, 238], [34, 211, 238], [122, 146, 156]],
  [[73, 167, 142], [137, 145, 153], [144, 142, 151], [57, 163, 117], [158, 157, 62], [165, 153, 60], [99, 141, 106], [86, 131, 174], [93, 128, 172], [141, 119, 94], [147, 102, 168], [154, 98, 166], [183, 97, 83], [115, 150, 158], [122, 146, 156], [177, 109, 113]],
], dtype=np.float32)

# Kernels shape: (K, 3, 3, 3) with K = 3
kernels = np.array([
  [
    [
      [-0.0925, -0.0187, 0.0404],
      [0.0789, -0.0915, -0.0139],
      [0.0339, -0.0173, 0.0149],
    ],
    [
      [0.0291, -0.0138, 0.0073],
      [-0.0414, 0.0106, 0.0172],
      [0.0157, 0.0655, 0.0376],
    ],
    [
      [0.0707, -0.0113, 0.0556],
      [-0.0516, -0.0251, 0.0226],
      [-0.0726, -0.0337, -0.0167],
    ]
  ],
  [
    [
      [-0.0099, -0.0202, 0.0238],
      [0.0376, 0.0353, -0.0162],
      [-0.0359, -0.0400, -0.0146],
    ],
    [
      [-0.0578, 0.0335, 0.0119],
      [-0.0511, -0.0267, -0.0842],
      [0.0324, -0.0313, -0.0034],
    ],
    [
      [0.0159, -0.0721, -0.0365],
      [0.0216, 0.0844, 0.0853],
      [0.0539, 0.0561, 0.0083],
    ]
  ],
  [
    [
      [-0.0316, -0.0455, 0.0400],
      [0.0053, 0.0427, 0.0257],
      [0.0413, 0.0361, 0.0723],
    ],
    [
      [-0.0233, -0.0602, -0.0056],
      [-0.0080, 0.0387, 0.0010],
      [0.0728, -0.0136, -0.0308],
    ],
    [
      [0.0481, -0.0609, -0.0662],
      [-0.0722, -0.0297, -0.0357],
      [-0.0166, 0.0692, 0.0069],
    ]
  ]
], dtype=np.float32)

# User-style function, corrected channel labels and dynamic size

def convolve(image, kernel):
    H, W, C = image.shape
    assert C == 3 and kernel.shape == (3, 3, 3)
    img = image.astype(np.float32, copy=False)
    for i in range(H - 2):
        row = []
        for j in range(W - 2):
            r = int(np.sum(img[i:i+3, j:j+3, 0] * kernel[0]))
            g = int(np.sum(img[i:i+3, j:j+3, 1] * kernel[1]))
            b = int(np.sum(img[i:i+3, j:j+3, 2] * kernel[2]))
            row.append(r + g + b)
        print(row)

print('First output channel using kernels[0]:')
convolve(image, kernels[0])
